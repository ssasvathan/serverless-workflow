id: order-orchestrator
name: Order Orchestrator
version: "0.1"
specVersion: "0.8"
start:
  stateName: AwaitOrder

functions:
  # Local Java function
  - name: fraudCheck
    type: custom
    operation: "service:java:com.example.FraudService::check"

  # AsyncAPI-backed functions (point at operationIds in the AsyncAPI file)
  - name: consumeOrderCreatedFn
    type: asyncapi
    operation: "asyncapi/orders-asyncapi.yaml#consumeOrderCreated"

  - name: consumePaymentConfirmedFn
    type: asyncapi
    operation: "asyncapi/orders-asyncapi.yaml#consumePaymentConfirmed"

  - name: publishOrderAcceptedFn
    type: asyncapi
    operation: "asyncapi/orders-asyncapi.yaml#publishOrderAccepted"

  - name: publishOrderRejectedFn
    type: asyncapi
    operation: "asyncapi/orders-asyncapi.yaml#publishOrderRejected"

  - name: publishInventoryReleaseFn
    type: asyncapi
    operation: "asyncapi/orders-asyncapi.yaml#publishInventoryRelease"

  - name: publishOrderCancelledFn
    type: asyncapi
    operation: "asyncapi/orders-asyncapi.yaml#publishOrderCancelled"

states:

  # Wait for an order by consuming from Kafka via AsyncAPI
  - name: AwaitOrder
    type: operation
    actions:
      - name: WaitOnOrderCreated
        functionRef:
          refName: consumeOrderCreatedFn
    transition: RunFraud

  - name: RunFraud
    type: operation
    actions:
      - name: DoFraudCheck
        functionRef:
          refName: fraudCheck
          arguments:
            amount: "${ .data.amount }"
            customerId: "${ .data.customerId }"
    transition: RouteDecision

  - name: RouteDecision
    type: switch
    dataConditions:
      - condition: "${ .fraudResult.approved == true }"
        transition: PublishAccepted
      - condition: "${ .fraudResult.approved == false }"
        transition: PublishRejected
    defaultCondition:
      transition: PublishRejected

  - name: PublishAccepted
    type: operation
    actions:
      - name: EmitAccepted
        functionRef:
          refName: publishOrderAcceptedFn
          arguments:
            orderId: "${ .data.orderId }"
            reason:  "OK"
    transition: AwaitPayment

  - name: PublishRejected
    type: operation
    actions:
      - name: EmitRejected
        functionRef:
          refName: publishOrderRejectedFn
          arguments:
            orderId: "${ .data.orderId }"
            reason:  "${ .fraudResult.reason }"
    end: true

  # Wait for payment via AsyncAPI consume function (Kafka)
  - name: AwaitPayment
    type: operation
    actions:
      - name: WaitOnPaymentConfirmed
        functionRef:
          refName: consumePaymentConfirmedFn
    transition: EndSuccess
    timeouts:
      eventTimeout: PT2M   # 2 minutes; engine/guide documents timeouts on waits
    transition: Compensate

  - name: EndSuccess
    type: operation
    actions: []
    end: true

  - name: Compensate
    type: operation
    actions:
      - name: EmitRelease
        functionRef:
          refName: publishInventoryReleaseFn
          arguments:
            orderId: "${ .data.orderId }"
      - name: EmitCancelled
        functionRef:
          refName: publishOrderCancelledFn
          arguments:
            orderId: "${ .data.orderId }"
            reason:  "payment-timeout"
    end: true
