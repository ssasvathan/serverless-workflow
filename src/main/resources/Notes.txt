###Old
create app com.workflow:serverless-workflow
mvnw quarkus:add-extension -Dextensions="org.apache.kie.sonataflow:sonataflow-quarkus-extension:10.1.0"
quarkus ext add io.quarkus:quarkus-messaging-kafka
mvnw quarkus:add-extension -Dextensions="org.apache.kie.sonataflow:sonataflow-quarkus-devui:10.1.0"
mvnw quarkus:add-extension -Dextensions="io.quarkiverse.asyncapi:quarkus-asyncapi:1.0.4"

#New Instruction
mvn io.quarkus.platform:quarkus-maven-plugin:create \
  -DprojectGroupId=com.workflow \
  -DprojectArtifactId=serverless-workflow
cd serverless-workflow

# Quarkiverse AsyncAPI â€“ reads your asyncapi.yaml and exposes it as MicroProfile config
./mvnw quarkus:add-extension -Dextensions="io.quarkiverse.asyncapi:quarkus-asyncapi"

# SonataFlow / Serverless Workflow runtime for Quarkus
./mvnw quarkus:add-extension -Dextensions="org.apache.kie.sonataflow:sonataflow-quarkus-extension:10.1.0"

# Kafka connector (new artifact name)
./mvnw quarkus:add-extension -Dextensions="io.quarkus:quarkus-messaging-kafka"

#Create topics named exactly like your channels:
docker exec -it kafka-serverless-workflow bash -lc "/opt/kafka/bin/kafka-topics.sh --create --topic order.created --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1"
docker exec -it kafka-serverless-workflow bash -lc "/opt/kafka/bin/kafka-topics.sh --create --topic payment.confirmed --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1"
docker exec -it kafka-serverless-workflow bash -lc "/opt/kafka/bin/kafka-topics.sh --create --topic order.rejected --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1"
docker exec -it kafka-serverless-workflow bash -lc "/opt/kafka/bin/kafka-topics.sh --create --topic order.accepted --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1"
docker exec -it kafka-serverless-workflow bash -lc "/opt/kafka/bin/kafka-topics.sh --create --topic inventory.release --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1"
docker exec -it kafka-serverless-workflow bash -lc "/opt/kafka/bin/kafka-topics.sh --create --topic order.cancelled --bootstrap-server localhost:9092 --partitions 3 --replication-factor 1"

#Verify
docker exec -it kafka-serverless-workflow bash -lc "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list"

#Running the app
REM ---- Set Java agent and OTel trace export to Jaeger gRPC (4317) ----
mvnw -U -DskipTests clean package
set "JAVA_TOOL_OPTIONS=-javaagent:C:/Users/Sas/workspace/serverless-workflow/src/main/resources/opentelemetry-javaagent.jar -Dotel.exporter.otlp.endpoint=http://localhost:4318 -Dotel.exporter.otlp.protocol=http/protobuf -Dotel.metrics.exporter=none -Dotel.logs.exporter=none"
mvnw quarkus:dev
mvnw quarkus:dev -Ddebug=5005 -Dsuspend=false

#Publish kafka event
docker exec -it kafka /bin/bash
kcat -b localhost:9092 -t order.created \
  -H "content-type=application/cloudevents+json" -P <<'EOF'
{ "specversion":"1.0","id":"evt-oc-001","source":"urn:orders:web","type":"order.created","subject":"order-123","time":"2025-10-07T20:00:00Z","datacontenttype":"application/json","data":{"orderId":"order-123","amount":9500,"customerId":"cust-001"}}
EOF

#Consume from Kafka
./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic order.created --from-beginning
./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic payment.confirmed --from-beginning