# src/main/resources/asyncapi/orders-asyncapi.yaml
asyncapi: '2.6.0'
info:
  title: Orders Orchestrator Ingress/Egress
  version: '1.0.0'
  description: "AsyncAPI 2.6 contract for inbound/outbound events. Note: we intentionally keep `topics == CloudEvent type` for 1:1 mapping."
defaultContentType: application/cloudevents+json

servers:
  local:
    url: localhost:9092
    protocol: kafka
    description: "Local Kafka broker."

channels:
  order.created:
    description: "Inbound event that starts the workflow."
    subscribe:
      operationId: consumeOrderCreated
      message:
        $ref: '#/components/messages/CloudEventOrderCreated'
  payment.confirmed:
    description: "Inbound event awaited by the workflow for up to 2 minutes."
    subscribe:
      operationId: consumePaymentConfirmed
      message:
        $ref: '#/components/messages/CloudEventPaymentConfirmed'
  order.accepted:
    description: "Outbound event published after successful fraud check."
    publish:
      operationId: produceOrderAccepted
      message:
        $ref: '#/components/messages/CloudEventOrderAccepted'
  order.rejected:
    description: "Outbound event published when fraud check fails."
    publish:
      operationId: produceOrderRejected
      message:
        $ref: '#/components/messages/CloudEventOrderRejected'
  inventory.release:
    description: "Outbound event used for compensation when payment times out or is rejected."
    publish:
      operationId: produceInventoryRelease
      message:
        $ref: '#/components/messages/CloudEventInventoryRelease'
  order.cancelled:
    description: "Outbound event to cancel the order following compensation."
    publish:
      operationId: produceOrderCancelled
      message:
        $ref: '#/components/messages/CloudEventOrderCancelled'

components:
  schemas:
    CloudEventBase:
      type: object
      required: [specversion, id, source, type, data]
      properties:
        specversion:
          type: string
          enum: ['1.0']
        id:
          type: string
        source:
          type: string
        type:
          type: string
        subject:
          type: string
          description: "Correlation key. We use the order id here."
        time:
          type: string
          format: date-time
        datacontenttype:
          type: string
          example: application/json
        data:
          type: object
    OrderCreatedData:
      type: object
      required: [orderId, amount]
      properties:
        orderId:
          type: string
        amount:
          type: number
          format: double
        customerId:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              sku:
                type: string
              qty:
                type: integer
    PaymentConfirmedData:
      type: object
      required: [orderId, paymentId, amount]
      properties:
        orderId:
          type: string
        paymentId:
          type: string
        amount:
          type: number
          format: double
    OrderAcceptedData:
      type: object
      required: [orderId]
      properties:
        orderId:
          type: string
        reason:
          type: string
    OrderRejectedData:
      type: object
      required: [orderId, reason]
      properties:
        orderId:
          type: string
        reason:
          type: string
    InventoryReleaseData:
      type: object
      required: [orderId]
      properties:
        orderId:
          type: string
        note:
          type: string
    OrderCancelledData:
      type: object
      required: [orderId]
      properties:
        orderId:
          type: string
        reason:
          type: string

  messages:
    CloudEventOrderCreated:
      name: order.created
      title: "CloudEvent (structured) for order.created"
      contentType: application/cloudevents+json
      payload:
        allOf:
          - $ref: '#/components/schemas/CloudEventBase'
          - type: object
            properties:
              type:
                const: order.created
              data:
                $ref: '#/components/schemas/OrderCreatedData'

    CloudEventPaymentConfirmed:
      name: payment.confirmed
      title: "CloudEvent (structured) for payment.confirmed"
      contentType: application/cloudevents+json
      payload:
        allOf:
          - $ref: '#/components/schemas/CloudEventBase'
          - type: object
            properties:
              type:
                const: payment.confirmed
              data:
                $ref: '#/components/schemas/PaymentConfirmedData'

    CloudEventOrderAccepted:
      name: order.accepted
      title: "CloudEvent (structured) for order.accepted"
      contentType: application/cloudevents+json
      payload:
        allOf:
          - $ref: '#/components/schemas/CloudEventBase'
          - type: object
            properties:
              type:
                const: order.accepted
              data:
                $ref: '#/components/schemas/OrderAcceptedData'

    CloudEventOrderRejected:
      name: order.rejected
      title: "CloudEvent (structured) for order.rejected"
      contentType: application/cloudevents+json
      payload:
        allOf:
          - $ref: '#/components/schemas/CloudEventBase'
          - type: object
            properties:
              type:
                const: order.rejected
              data:
                $ref: '#/components/schemas/OrderRejectedData'

    CloudEventInventoryRelease:
      name: inventory.release
      title: "CloudEvent (structured) for inventory.release"
      contentType: application/cloudevents+json
      payload:
        allOf:
          - $ref: '#/components/schemas/CloudEventBase'
          - type: object
            properties:
              type:
                const: inventory.release
              data:
                $ref: '#/components/schemas/InventoryReleaseData'

    CloudEventOrderCancelled:
      name: order.cancelled
      title: "CloudEvent (structured) for order.cancelled"
      contentType: application/cloudevents+json
      payload:
        allOf:
          - $ref: '#/components/schemas/CloudEventBase'
          - type: object
            properties:
              type:
                const: order.cancelled
              data:
                $ref: '#/components/schemas/OrderCancelledData'
