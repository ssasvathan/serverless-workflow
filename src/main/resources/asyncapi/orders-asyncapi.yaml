asyncapi: '2.6.0'
info:
  title: Orders EDA (Kafka + CloudEvents)
  version: 1.0.0

# We'll send/receive structured CloudEvents as JSON
defaultContentType: application/cloudevents+json

servers:
  development:
    url: localhost:9092
    protocol: kafka
    protocolVersion: '1.0.0'

channels:
  # ---- INCOMING (used by workflow via AsyncAPI function) ----
  order.created:
    description: "Incoming orders (CloudEvent: type=order.created, structured)."
    subscribe:
      operationId: consumeOrderCreated        # <-- referenced by the workflow
      message:
        $ref: '#/components/messages/OrderCreatedCE'
    bindings:
      kafka:
        bindingVersion: '0.5.0'

  # ---- INCOMING (documented; your workflow waits via Event state) ----
  payment.confirmed:
    description: "Payment confirmation (CloudEvent: type=payment.confirmed, structured)."
    subscribe:
      operationId: consumePaymentConfirmed
      message:
        $ref: '#/components/messages/PaymentConfirmedCE'
    bindings:
      kafka:
        bindingVersion: '0.5.0'

  # ---- OUTGOING (documented; your workflow emits via eventRef) ----
  order.accepted:
    description: "Order accepted (CloudEvent: type=order.accepted, structured)."
    publish:
      operationId: publishOrderAccepted
      message:
        $ref: '#/components/messages/OrderAcceptedCE'
    bindings:
      kafka:
        bindingVersion: '0.5.0'

  order.rejected:
    description: "Order rejected (CloudEvent: type=order.rejected, structured)."
    publish:
      operationId: publishOrderRejected
      message:
        $ref: '#/components/messages/OrderRejectedCE'
    bindings:
      kafka:
        bindingVersion: '0.5.0'

  inventory.release:
    description: "Release reserved inventory (CloudEvent: type=inventory.release, structured)."
    publish:
      operationId: publishInventoryRelease
      message:
        $ref: '#/components/messages/InventoryReleaseCE'
    bindings:
      kafka:
        bindingVersion: '0.5.0'

  order.cancelled:
    description: "Order cancelled (CloudEvent: type=order.cancelled, structured)."
    publish:
      operationId: publishOrderCancelled
      message:
        $ref: '#/components/messages/OrderCancelledCE'
    bindings:
      kafka:
        bindingVersion: '0.5.0'

components:
  messages:
    # Each message is a CloudEvent envelope with your business schema in `data`
    OrderCreatedCE:
      name: OrderCreatedCE
      contentType: application/cloudevents+json
      payload:
        type: object
        required: [specversion, id, type, source, data]
        properties:
          specversion: { type: string, enum: ['1.0'] }
          id:          { type: string }
          type:        { type: string, const: 'order.created' }
          source:      { type: string }
          subject:     { type: string }
          datacontenttype: { type: string, const: 'application/json' }
          time:        { type: string, format: date-time }
          data:
            $ref: '#/components/schemas/OrderCreated'

    PaymentConfirmedCE:
      name: PaymentConfirmedCE
      contentType: application/cloudevents+json
      payload:
        type: object
        required: [specversion, id, type, source, data]
        properties:
          specversion: { type: string, enum: ['1.0'] }
          id:          { type: string }
          type:        { type: string, const: 'payment.confirmed' }
          source:      { type: string }
          subject:     { type: string }
          datacontenttype: { type: string, const: 'application/json' }
          time:        { type: string, format: date-time }
          data:
            $ref: '#/components/schemas/PaymentConfirmed'

    OrderAcceptedCE:
      name: OrderAcceptedCE
      contentType: application/cloudevents+json
      payload:
        type: object
        required: [specversion, id, type, source, data]
        properties:
          specversion: { type: string, enum: ['1.0'] }
          id:          { type: string }
          type:        { type: string, const: 'order.accepted' }
          source:      { type: string }
          subject:     { type: string }
          datacontenttype: { type: string, const: 'application/json' }
          time:        { type: string, format: date-time }
          data:
            $ref: '#/components/schemas/OrderAccepted'

    OrderRejectedCE:
      name: OrderRejectedCE
      contentType: application/cloudevents+json
      payload:
        type: object
        required: [specversion, id, type, source, data]
        properties:
          specversion: { type: string, enum: ['1.0'] }
          id:          { type: string }
          type:        { type: string, const: 'order.rejected' }
          source:      { type: string }
          subject:     { type: string }
          datacontenttype: { type: string, const: 'application/json' }
          time:        { type: string, format: date-time }
          data:
            $ref: '#/components/schemas/OrderRejected'

    InventoryReleaseCE:
      name: InventoryReleaseCE
      contentType: application/cloudevents+json
      payload:
        type: object
        required: [specversion, id, type, source, data]
        properties:
          specversion: { type: string, enum: ['1.0'] }
          id:          { type: string }
          type:        { type: string, const: 'inventory.release' }
          source:      { type: string }
          subject:     { type: string }
          datacontenttype: { type: string, const: 'application/json' }
          time:        { type: string, format: date-time }
          data:
            $ref: '#/components/schemas/InventoryRelease'

    OrderCancelledCE:
      name: OrderCancelledCE
      contentType: application/cloudevents+json
      payload:
        type: object
        required: [specversion, id, type, source, data]
        properties:
          specversion: { type: string, enum: ['1.0'] }
          id:          { type: string }
          type:        { type: string, const: 'order.cancelled' }
          source:      { type: string }
          subject:     { type: string }
          datacontenttype: { type: string, const: 'application/json' }
          time:        { type: string, format: date-time }
          data:
            $ref: '#/components/schemas/OrderCancelled'

  schemas:
    OrderCreated:
      type: object
      required: [orderId, amount, customerId]
      properties:
        orderId: { type: string }
        amount:  { type: number }
        customerId: { type: string }

    PaymentConfirmed:
      type: object
      required: [orderId, status]
      properties:
        orderId: { type: string }
        status:  { type: string, enum: [authorized, captured] }

    OrderAccepted:
      type: object
      required: [orderId, reason]
      properties:
        orderId: { type: string }
        reason:  { type: string }

    OrderRejected:
      type: object
      required: [orderId, reason]
      properties:
        orderId: { type: string }
        reason:  { type: string }

    InventoryRelease:
      type: object
      required: [orderId]
      properties:
        orderId: { type: string }

    OrderCancelled:
      type: object
      required: [orderId, reason]
      properties:
        orderId: { type: string }
        reason:  { type: string }
