# src/main/resources/order-orchestrator.sw.yaml
id: order-orchestrator
name: Order Orchestrator
version: '1.0'
specVersion: '0.8'
description: >
  Starts on order.created (Kafka), fraud-checks, publishes order.accepted/order.rejected,
  waits for payment.confirmed with 2-minute timeout, compensates on timeout.

start:
  stateName: AwaitOrderCreated

functions:
  - name: fraudCheck
    type: custom
    operation: "java:com.example.FraudService::check"

events:
  # NOTE: types here are Java-safe identifiers (no dots). We still use dotted Kafka topics.
  - name: orderCreatedEvt
    type: "orderCreated"
    kind: consumed
    correlation:
      - contextAttributeName: subject
  - name: paymentConfirmedEvt
    type: "paymentConfirmed"
    kind: consumed
    correlation:
      - contextAttributeName: subject
  - name: orderAcceptedEvt
    source: "urn:order-orchestrator"
    type: "orderAccepted"
    kind: produced

  - name: orderRejectedEvt
    source: "urn:order-orchestrator"
    type: "orderRejected"
    kind: produced

  - name: inventoryReleaseEvt
    source: "urn:order-orchestrator"
    type: "inventoryRelease"
    kind: produced

  - name: orderCancelledEvt
    source: "urn:order-orchestrator"
    type: "orderCancelled"
    kind: produced

states:

  - name: AwaitOrderCreated
    type: event
    onEvents:
      - eventRefs: [orderCreatedEvt]
        eventDataFilter:
          toStateData: "${ . + { data: .data } }"
        actions: []
    transition: FraudCheck

  - name: FraudCheck
    type: operation
    actions:
      - name: InvokeFraudCheck
        functionRef:
          refName: fraudCheck
          arguments:
            order: "${ .data }"
        actionDataFilter:
          results: "${ . }"          # result of FraudService::check (true/false)
          toStateData: ".fraudOk"    # put that boolean at .fraudOk
    transition: FraudDecision

  - name: FraudDecision
    type: switch
    dataConditions:
      - condition: "${ .fraudOk == true }"
        transition: EmitOrderAccepted
      - condition: "${ .fraudOk == false }"
        transition: EmitOrderRejected
    defaultCondition:
      transition: EmitOrderRejected

  - name: EmitOrderAccepted
    type: operation
    actions:
      - name: PublishOrderAccepted
        eventRef:
          triggerEventRef: orderAcceptedEvt
          # Set the outgoing CloudEvent attributes explicitly:
          contextAttributes:
            subject: "${ .data.orderId }"
            type: "order.accepted"             # CE type (dotted)
            datacontenttype: "application/json"
          data: "${ { orderId: .data.orderId, reason: \"Approved by fraud service\" } }"
    transition: WaitForPayment

  - name: EmitOrderRejected
    type: operation
    actions:
      - name: PublishOrderRejected
        eventRef:
          triggerEventRef: orderRejectedEvt
          contextAttributes:
            subject: "${ .data.orderId }"
            type: "order.rejected"
            datacontenttype: "application/json"
          data: "${ { orderId: .data.orderId, reason: \"Amount exceeds risk threshold\" } }"
    end: true

  - name: WaitForPayment
    type: event
    timeouts:
      eventTimeout: PT2M
    onEvents:
      - eventRefs: [paymentConfirmedEvt]
        eventDataFilter:
          toStateData: "${ . + { payment: .data } }"
        actions: []
    transition: AfterWait

  - name: AfterWait
    type: switch
    dataConditions:
      - condition: "${ .payment != null }"
        transition: EndSuccess
    defaultCondition:
      transition: Compensate

  - name: Compensate
    type: operation
    actions:
      - name: PublishInventoryRelease
        eventRef:
          triggerEventRef: inventoryReleaseEvt
          contextAttributes:
            subject: "${ .data.orderId }"
            type: "inventory.release"
            datacontenttype: "application/json"
          data: "${ { orderId: .data.orderId, note: \"Payment timeout. Releasing inventory.\" } }"
      - name: PublishOrderCancelled
        eventRef:
          triggerEventRef: orderCancelledEvt
          contextAttributes:
            subject: "${ .data.orderId }"
            type: "order.cancelled"
            datacontenttype: "application/json"
          data: "${ { orderId: .data.orderId, reason: \"Payment not confirmed in time\" } }"
    end: true

  - name: EndSuccess
    type: operation
    actions: []
    end: true
